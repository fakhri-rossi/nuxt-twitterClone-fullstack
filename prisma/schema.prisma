// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  email        String 
  name         String?
  username     String  @unique
  password     String
  profileImage String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  refreshToken RefreshToken[]
  tweet Tweet[]
  mediaFiles MediaFile[]
}

model RefreshToken {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  token        String  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId  String @db.ObjectId
  user User @relation(fields: [userId], references: [id])
}

model Tweet {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  text             String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Author
  authorId String @db.ObjectId
  author User @relation(fields: [authorId], references: [id])

  // Tweet
  replyToId String? @db.ObjectId
  replyTo Tweet? @relation("replies", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies Tweet[] @relation("replies")

  // Media Files
  mediaFiles MediaFile[]
}

model MediaFile {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  url String
  providerPublicId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // author
  user User @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  // tweet
  tweet Tweet @relation(fields: [tweetId], references: [id])
  tweetId String @db.ObjectId

}

// model User {
//   id    Int     @id @default(autoincrement())
//   email String  @unique
//   name  String?
//   posts Post[]
// }

// model Post {
//   id        Int     @id @default(autoincrement())
//   title     String
//   content   String?
//   published Boolean @default(false)
//   author    User    @relation(fields: [authorId], references: [id])
//   authorId  Int
// }
